/**
 * HaikuGenerator --- generates haikus
 * @author    Saralin Zassman
 */
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class HaikuGenerator {
    //sequence of words generated by TextGenerator
    public static List<String> arrWords;

    public HaikuGenerator() throws IOException {
        arrWords = TextGenerator.generateList();
    }

    /*generate haikus*/
    public static String generateHaiku() throws IOException {
        HaikuGenerator hg = new HaikuGenerator();
        return hg.createHaiku();
    }

    /*returns a line for the final Haiku*/
    public List<String> createLine(int numSyllables, int lineNumber) {
        int endIndex = findLine(numSyllables, lineNumber);
        if (endIndex != -1) {
            return addWords(endIndex);
        }
        //unable to generate line with the correct number of syllables
        return null;
    }

    /*searches through arrWords to find a series of words that can be used as a line in the haiku*/
    public int findLine(int totSyllable, int lineNumber) {
        SyllableCounter sc = new SyllableCounter(); //create SyllableCounter object
        int numSyllable = 0; //number of syllables
        for (int i = 0; i < arrWords.size() - totSyllable; i++) {
            numSyllable += sc.count(arrWords.get(i)); //increment count by syllable number
            //if line is the correct number of syllables and a suitable form for the designated line number
            if (numSyllable == totSyllable && LineChecker.lineCheck(arrWords, lineNumber, i)) {
                return i; //return the index of the last word in the line
            }
            //if number of syllables in the line is greater than the designated number of syllables
            else if (numSyllable > totSyllable) {
                numSyllable = 0;
                i = 0; //restart the for loop
                arrWords.remove(0); //remove first word in arrWords
            }
        }
        return -1; //arrWords does not contain a sequence of strings with the correct number of syllables
    }

    /*add each word in the line from arrWords to a List<String>*/
    public List<String> addWords(int endIndex) {
        List<String> line = new ArrayList<>();
        for (int i = 0; i < (endIndex + 1); i++) {
            line.add(arrWords.get(0));
            arrWords.remove(0); //remove word from arrWords
        }
        return line;
    }

    /*returns a haiku, or null if a haiku could not be generated*/
    public String createHaiku() {
        //generate each line of the haiku
        List<String> line1 = createLine(5, 1);
        List<String> line2 = createLine(7, 2);
        List<String> line3 = createLine(5, 3);

        //return null if any of the lines could not be generated
        if (line1 == null || line2 == null || line3 == null) {
            return null;
        }

        //convert each List<String> to a String
        String str1 = String.join(" ", line1);
        String str2 = String.join(" ", line2);
        String str3 = String.join(" ", line3).trim();

        //ensure first and second line always end with comma
        str1 = str1.substring(0, str1.length() - 1) + ',';
        str2 = str2.substring(0, str2.length() - 1) + ',';

        //ensure third line ends with a period
        if (str3.matches(".*[,?.,!;:-]$")) {
            str3 = str3.substring(0, str3.length() - 1).concat(".");
        }

        //put all three string together
        return str1 + '\n' + str2 + '\n' + str3;
    }

}
